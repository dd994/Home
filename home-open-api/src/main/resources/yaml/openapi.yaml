openapi: 3.0.0
info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  version: 1.0.0
servers:
  - url: /api/0
tags:
  - name: news
    description: News management operations
  - name: chats
    description: Operations with chats
  - name: messages
    description: Operations with messages-
  - name: user
    description: user management
  - name: voting
    description: Votings management operations
  - name: service
    description: Orders management operations
  - name: cooperation
    description: cooperation managment
  - name: houses
    description: Operations with house
paths:
  /news:
    post:
      tags:
        - news
      summary: Add a news to the home page
      description: Add a news to the home page
      operationId: addNews
      requestBody:
        description: Create a news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNews'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all news to the home page
      description: This endpoint delivers all news to the Home Page
      operationId: getAllNews
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its id
      description: View an existing news by its Identifier
      operationId: getNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing news
      description: Update an existing news by Identifier
      operationId: updateNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNews'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      operationId: deleteNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats:
    get:
      tags:
        - chats
      summary: Gets all chats
      description: Get all chats
      operationId: getAllChats
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 3
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: Got all chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadAllChats'
        "401":
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - chats
      summary: Add a new chat
      description: Add a new chat
      operationId: addChats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChat'
      responses:
        '201':
          description: Chat is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        'default':
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}:
    get:
      tags:
        - chats
      summary: Gets specific chat by id
      description: Gets specific chat by id
      operationId: getChats
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: Got specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadChat'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        'default':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - chats
      summary: Updates a specific chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChat'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - chats
      summary: Deletes a chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      responses:
        '204':
          description: Chat is deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}/messages:
    get:
      tags:
        - messages
      summary: Gets back the chat history of messages by id
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 50
            default: 10
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: Got all messages from specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAllMessages'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}/messages/{message_id}:
    get:
      tags:
        - messages
      summary: Gets message from specific chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: Got message from specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadMessage'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - messages
      summary: Creates a new message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
      responses:
        '201':
          description: Message in chat is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - messages
      summary: Updates a message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessage'
      responses:
        '200':
          description: Message in chat is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - messages
      summary: Deletes a message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      responses:
        '204':
          description: Message in chat is deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: "Get all users"
      description: ''
      operationId: queryUsers
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      tags:
        - user
      summary: "Get user by user name"
      description: ''
      operationId: getUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current user
      description: Update current user
      operationId: updateUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      operationId: removeUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /votings :
    get:
      tags:
        - voting
      summary: Returns a list of active votings
      description: This endpoint shows all votings to user
      operationId: getAllVotings
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          required: false
          description: Filter votings by endDate
      responses:
        "200":
          description: Successfully returns a list of active votings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VotingList'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "default":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - voting
      summary: Create new voting
      description: Add a voting
      operationId: addVoting
      requestBody:
        description: Successfully created new voting
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVoting'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voting'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /votings/{voting_id}/variants:
    get:
      tags:
        - voting
      summary: Returns a voteslist in chosen voting
      description: View an existing votelist
      operationId: getAllVariants
      parameters:
        - name: voting_id
          in: path
          required: true
          description: voting id
          schema:
            type : integer
      responses:
        "200":
          description: Successfully returns a list of votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VariantList'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - voting
      summary: Allows to vote for chosen variant
      description: Add a vote in voting
      operationId: choose vote
      parameters:
        - name: voting_id
          in: path
          required: true
          description: vote id
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVariant'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /votings/{voting_id}:
    put:
      tags:
        - voting
      summary: Edit an existing voting
      description: Editing an existing voting
      operationId: updateVoting
      parameters:
        - name: voting_id
          in: path
          required: true
          description: vote id
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVoting'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voting'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - voting
      summary: Delete an existing voting
      operationId: deleteVoting
      parameters:
        - name: voting_id
          in: path
          required: true
          description: voting id
          schema:
            type : integer
      responses:
        "204":
          description: Succesful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /orders:
    get:
      tags:
        - service
      summary: Returns a list of orders
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: dateOrder
          schema:
            type: string
            format: date-time
          required: false
          description: Filter orders by date.
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - service
      summary: Create a service order
      requestBody:
        description: Add a new order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /orders/{order_id}:
    get:
      tags:
        - service
      summary: Returns information about the order
      parameters:
        - name: order_id
          in: path
          required: true
          description: ID of the order
          schema:
            type : integer
      responses:
        "200":
          description: Order by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOrder'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - service
      summary: Delete order
      parameters:
        - name: order_id
          in: path
          required: true
          description: ID of the order
          schema:
            type : integer
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /services:
    get:
      tags:
        - service
      summary: Returns a list of services
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          description: List of services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "default":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - service
      summary: Create service
      requestBody:
        description: Add a new service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateService'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /services/{service_id}:
    get:
      tags:
        - service
      summary: Returns information about the service
      parameters:
        - name: service_id
          in: path
          required: true
          description:  Service id
          schema:
            type : integer
      responses:
        "200":
          description: Service id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadService'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - service
      summary: Update service
      parameters:
        - name: service_id
          in: path
          required: true
          description: Service id
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateService'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - service
      summary: Delete service
      parameters:
        - name: service_id
          in: path
          required: true
          description: Service id
          schema:
            type : integer
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /executors:
    get:
      tags:
        - service
      summary: Returns a list of executors
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          description: List of executors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutorList'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "default":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - service
      summary: Create executor
      requestBody:
        description: Add a new executor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExecutor'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Executor'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /executors/{executor_id}:
    get:
      tags:
        - service
      summary: Returns information about the executor
      parameters:
        - name: executor_id
          in: path
          required: true
          description: ID of the executor
          schema:
            type : integer
      responses:
        "200":
          description: Executor by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadExecutor'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - service
      summary: Update executor
      parameters:
        - name: executor_id
          in: path
          required: true
          description: Executor id
          schema:
            type : integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExecutor'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Executor'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - service
      summary: Delete executor
      parameters:
        - name: executor_id
          in: path
          required: true
          description: Executor id
          schema:
            type : integer
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /myaccount:
    get:
      tags:
        - myaccount
      summary: Get all inform about your account
      description: This endpoint delivers all information about user
      operationId: getMyAccount
      responses:
        "200":
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadUser'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: News not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          $ref: '#/components/responses/InternalServerError'

  /myaccount/{user_id}:
    put:
      tags:
        - myaccount
      summary: Update information
      description: Update some configuration
      operationId: updateUserAcc
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update user inform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - myaccount
      summary: Delete account
      operationId: deleteAcc
      parameters:
        - name: user_id
          in: path
          description: Name value that need to be considered for filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Succesful operation
        "400":
          description: Invalid name supplied
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: News not found
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation:
    post:
      tags:
        - cooperation
      summary: Create cooperation
      description: Create a new cooperation
      operationId: createCooperation
      requestBody:
        description: Create a new cooperation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCooperation'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadCooperation'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation
      summary: "Get all cooperation"
      description: ''
      operationId: queryCooperation
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadCooperation"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}:
    get:
      tags:
        - cooperation
      summary: "Get cooperation by cooperation name"
      description: ''
      operationId: getCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCooperation"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation
      summary: Update current cooperation
      description: Update current cooperation
      operationId: updateCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current cooperation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCooperation'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCooperation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation
      summary: Delete cooperation by ID
      operationId: removeCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}/houses:
    post:
      tags:
        - houses
      summary: Create house
      description: Create a new house
      operationId: createHouse
      parameters:
        - name: cooperation_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      requestBody:
        description: Create a new House
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHouse'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadHouse'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - houses
      summary: "Get all hauses"
      description: ''
      operationId: queryHouse
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - name: cooperation_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadHouse"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}/houses/{house_id}:
    get:
      tags:
        - houses
      summary: "Get house by house name"
      description: ''
      operationId: getHouse
      parameters:
        - name: cooperation_id
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: house_id
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadHouse"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - houses
      summary: Update current house
      description: Update current house
      operationId: updateHouse
      parameters:
        - name: cooperation_id
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "house_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current house
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHouse'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadHouse"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - houses
      summary: Delete house by ID
      operationId: removeHouse
      parameters:
        - name: cooperation_id
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "house_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: Validation Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Conflict with current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    BaseView:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 50
        photoUrl:
          type: string
          format: url
        description:
          type: string
        source:
          type: string
        text:
          type: string
    CreateNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photoUrl:
          type: string
        description:
          type: string
          minLength: 1
          maxLength: 150
        source:
          type: string
        text:
          type: string
          minLength: 1
    UpdateNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
        photoUrl:
          type: string
        description:
          type: string
          minLength: 1
          maxLength: 50
        source:
          type: string
        text:
          type: string
          minLength: 1
          maxLength: 150
    ApiError:
      type: object
      properties:
        responseCode:
          type: integer
        errorMessage:
          type: string
    Chat:
      type: object
      properties:
        id:
          type: number
          example: 23
        name:
          type: string
          example: "chat of the floor 4, building 5"
        date_created:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        date_updated:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        icon_link:
          type: string
          example: "aw.link/sndfnjk74"
        members:
          type: array
          items:
            type: string
            example: "10, 8, 56, 9"
    ReadAllChats:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        name:
          type: string
          example: "super-chat"
        icon:
          type: string
          example: "/link-here"
        members:
          type: array
          items:
            type: string
            example: "9, 65, 45, 6"
    ReadChat:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        name:
          type: string
          example: "super chat"
        icon:
          type: string
          example: "/link-here"
        members:
          type: array
          items:
            type: string
            example: "4, 6, 87, 6"
    CreateChat:
      type: object
      properties:
        name:
          type: string
          example: "New super chat"
        icon:
          type: string
          example: "/link/here/to/icon"
        members:
          type: array
          items:
            type: string
            example: "10, 5, 7, 4"
    UpdateChat:
      type: object
      properties:
        name:
          type: string
          example: "supe chat"
        icon:
          type: string
          example: "/link/here/to/icon"
        members:
          type: array
          items:
            type: string
            example: "4, 6, 7, 234"
    CreateHouse:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
        - cooperation_id
      type: object
      properties:
        quantityFlat:
          type: integer
        houseArea:
          type: string
        adjoiningArea:
          type: integer
        address:
          type: integer
        cooperationId:
          type: integer
    ReadHouse:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        quantityFlat:
          type: integer
        houseArea:
          type: string
        adjoiningArea:
          type: integer
        addressId:
          type: integer
        cooperationId:
          type: integer
    UpdateHouse:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        quantityFlat:
          type: integer
        houseArea:
          type: string
        adjoiningArea:
          type: integer
        addressId:
          type: integer
        cooperationId:
          type: integer
          example: 0
    Message:
      type: object
      properties:
        id:
          type: number
          example: 197
        body:
          type: string
          example: "aws.imagelink/trh6u59"
        date_created:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        date_updated:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        from_id:
          type: number
          example: 45
        to_id:
          type: number
          example: 76
        type:
          type: string
          enum: [text, image, file]
          example: image
        is_important:
          type: boolean
    ReadAllMessages:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: array
      items:
        type: object
        properties:
          body:
            type: string
            example: "hello Ivan, doing cleanup doing?"
          from_id:
            type: number
            example: 3
          to_id:
            type: number
            example: 7
    ReadMessage:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        body:
          type: string
          example: "yes, I want to vote for Grisha"
        from_id:
          type: number
          example: 3
        to_id:
          type: number
          example: 7
    CreateMessage:
      type: object
      properties:
        body:
          type: string
          example: "Hi! New in chat"
        from_id:
          type: number
          example: 7
        to_id:
          type: number
          example: 10
        type:
          type: string
          example: "text"
        is_important:
          type: boolean
          example: true
    UpdateMessage:
      type: object
      properties:
        body:
          type: string
          example: "I want to change OSBB"
        is_important:
          type: boolean
          example: true
    CreateUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 3
          maxLength: 254
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contact:
          type: string
          example: "+380506617305"
    UpdateUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        contact:
          type: string
          example: "+380506617305"
          minLength: 10
          maxLength: 13
        contacts:
          type: string
          example: "+380506617305"
    CreateCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - name
        - USREO
        - IBAN
        - addressCooperation
        - emailCooperation
        - phoneCooperation
        - houses
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        USREO:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        IBAN:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 34
        addressCooperation:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          items:
            $ref: "#/components/schemas/House"
        phoneCooperation:
          type: array
          items:
            $ref: "#/components/schemas/PhoneCooperation"
        emailCooperation:
          type: array
          items:
            $ref: "#/components/schemas/EmailCooperation"
    ReadCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        USREO:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        IBAN:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 50
        addressCooperation:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          items:
            $ref: "#/components/schemas/House"
        phoneCooperation:
          type: array
          items:
            $ref: "#/components/schemas/PhoneCooperation"
        emailCooperation:
          type: array
          items:
            $ref: "#/components/schemas/EmailCooperation"
    UpdateCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        USREO:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        IBAN:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 50
        addressCooperation:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          items:
            $ref: "#/components/schemas/House"
        phoneCooperation:
          type: array
          items:
            $ref: "#/components/schemas/PhoneCooperation"
        emailCooperation:
          type: array
          items:
            $ref: "#/components/schemas/EmailCooperation"
    Address:
      type: object
      properties:
        region:
          type: string
          example: "Dnipropetrovsk region"
          minLength: 1
          maxLength: 50
        city:
          type: string
          example: "Dnipro"
          minLength: 1
          maxLength: 50
        district:
          type: string
          example: "Zavodskoy"
          minLength: 1
          maxLength: 50
        street:
          type: string
          example: "Kirova"
          minLength: 1
          maxLength: 25
        housingNumber:
          type: string
          example: "2/B"
          minLength: 1
          maxLength: 10
        houseNumber:
          type: string
          example: "23-B"
          minLength: 1
          maxLength: 50
        zipCode:
          type: integer
          example: 52956
    House:
      type: object
      properties:
        area:
          type: integer
          example: 0
    PhoneCooperation:
      type: object
      properties:
        phone:
          type: string
          example: "+380506617305"
          minLength: 10
          maxLength: 13
    EmailCooperation:
      type: object
      properties:
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 3
          maxLength: 254
    Voting:
      required:
        - name
        - shortDescription
        - startDate
        - endDate
        - fullDescription
        - variants
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ivanov
        shortDescription :
          type: string
          example: bench installing
        startDate :
          type: string
          format: date-time
          example: 25-10-2020 00:00
        endDate :
          type: string
          format: date-time
          example: 27-10-2020 00:00
        fullDescriptoin:
          type: string
          example: conditions of bench installing
        createDate:
          type: string
          format: date-time
          example: 21-10-2020 00:00
        updateDate:
          type: string
          format: date-time
          example: 22-10-2020 00:00
        isActive:
          type: boolean
          example: true
        variants :
          type: array
          items:
            type: object
            required:
              - vote
            properties:
              id:
                type: integer
                example: 1
              description:
                type: string
                example: yes
              users:
                type: array
                items:
                  type: object
                  required:
                    - user
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Petrov
    Variant:
      required:
        - desription
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: yes
        createDate:
          type: string
          format: date-time
          example: 21-10-2020 00:00
        updateDate:
          type: string
          format: date-time
          example: 22-10-2020 00:00
        isActive:
          type: boolean
          example: true
        voting:
          type: object
        users:
          type: array
          items:
            type: object
            required:
              - user
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Petrov
    VotingList:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ivanov
        shortDescription :
          type: string
          example: bench installing
        startDate :
          type: string
          format: date-time
          example: 22-10-2020 00:00
        endDate :
          type: string
          format: date-time
          example: 23-10-2020 00:00
    VariantList:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ivanov
        shortDescription :
          type: string
          example: bench installing
        startDate :
          type: string
          format: date-time
          example: 21-10-2020 00:00
        endDate :
          type: string
          format: date-time
          example: 25-10-2020 00:00
        fullDescriptoin:
          type: string
          example: conditions of bench installing
        variants :
          type: array
          items:
            type: object
            required:
              - vote
            properties:
              id:
                type: integer
                example: 1
              description:
                type: string
                example: yes
              users:
                type: array
                items:
                  type: object
                  required:
                    - user
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Petrov
    PostVariant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: yes
        voting:
          type: object
    CreateVoting:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Enter name
        shortDescription :
          type: string
          example: Enter short description
        startDate :
          type: string
          format: date-time
          example: Enter date
        endDate :
          type: string
          format: date-time
          example: Enter Date
        fullDescriptoin:
          type: string
          example: Enter Full description
        variants :
          type: array
          items:
            type: object
            required:
              - vote
            properties:
              id:
                type: integer
                example: 1
              description:
                type: string
                example: Enter vote text
    UpdateVoting:
      type: object
      properties:
        name:
          type: string
          example: Ivanov
        shortDescription :
          type: string
          example: bench installing
        startDate :
          type: string
          format: date-time
          example: 21-10-2020 00:00
        endDate :
          type: string
          format: date-time
          example: 25-10-2020 00:00
        fullDescriptoin:
          type: string
          example: conditions of bench installing
        variants :
          type: array
          items:
            type: object
            required:
              - vote
            properties:
              id:
                type: integer
                example: 1
              description:
                type: string
                example: yes
    Service:
      required:
        - name
        - executors
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Mechanic
        isActive:
          type: boolean
        executors:
          type: array
          items:
            type: object
            required:
              - executor
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Vasiliy Ivanov
              phoneNumber:
                type: string
                example: +380981256856
    Order:
      required:
        - name
        - user
        - executor
        - orderDate
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: mechanic
        isActive:
          type: boolean
        executor:
          type: string
          example: Ivan Ivanov
        user:
          type: string
          example: Viktor Vasilenko
        orderDate:
          type: string
          format: date-time
    OrderList:
      type: array
      items:
        type: object
        required:
          - order
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: mechanic
          executor:
            type: string
            example: Ivan Ivanov
          customer:
            type: string
            example: Viktor Vasilenko
          orderDate:
            type: string
            example: 26.04.2020
    Executor:
      required:
        - name
        - orders
        - services
        - phoneNumber
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Ivan Ivanov
        isActive:
          type: boolean
        orders:
          type: array
          items:
            type: object
            required:
              - order
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: mechanic
              customer:
                type: string
                example: Viktor Vasilenko
              orderDate:
                type: string
                format: date-time
        phoneNumber:
          type: string
          example: +380981256856
        services:
          type: array
          items:
            type: object
            required:
              - service
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: mechanic
    ServiceList:
      type: array
      items:
        type: object
        required:
          - service
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: mechanic
          executors:
            type: array
            items:
              type: object
              required:
                - executor
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: Ivan Ivanov
                phoneNumber:
                  type: string
                  example: +380981256856
    ExecutorList:
      type: array
      items:
        type: object
        required:
          - executor
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: Vasiliy Ivanov
          phoneNumber:
            type: string
            example: +380981256856
    ReadService:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      required:
        - service
      properties:
        name:
          type: string
          example: mechanic
        executor:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Vasiliy Ivanov
              phoneNumber:
                type: string
                example: +380981256856
    ReadOrder:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      required:
        - order
      properties:
        name:
          type: string
          example: mechanic
        executor:
          type: string
          example: Ivan Ivanov
        user:
          type: string
          example: Viktor Vasilenko
        orderDate:
          type: string
          format: date-time
    ReadExecutor:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      required:
        - executor
      properties:
        name:
          type: string
          example: Vasiliy Ivanov
        phoneNumber:
          type: string
          example: +380981256856
        services:
          type: array
          items:
            type: object
            required:
              - service
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: mechanic
        orders:
          type: array
          items:
            type: object
            required:
              - order
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: mechanic
              user:
                type: string
                example: Viktor Vasilenko
              orderDate:
                type: string
                format: date-time
    CreateService:
      type: object
      required:
        - service
      properties:
        name:
          type: string
          example: mechanic
        executors:
          type: array
          items:
            type: object
            required:
              - executor
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Ivan Ivanov
              phoneNumber:
                type: string
                example: +380981256856
    CreateOrder:
      type: object
      properties:
        name:
          type: string
          example: mechanic
        executor:
          type: string
          example: Ivan Ivanov
        user:
          type: string
          example: Viktor Vasilenko
        orderDate:
          type: string
          format: date-time
    CreateExecutor:
      type: object
      properties:
        name:
          type: string
          example: Ivan Ivanov
        phoneNumber:
          type: string
          example: +380981256856
        services:
          type: array
          items:
            type: object
            required:
              - service
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: mechanic
    UpdateService:
      type: object
      properties:
        name:
          type: string
          example: mechanic
        executor:
          type: string
          example: Ivan Ivanov
    UpdateExecutor:
      type: object
      required:
        - executor
      properties:
        name:
          type: string
          example: Ivan Ivanov
        phoneNumber:
          type: string
          example: +380981256856
        services:
          type: array
          items:
            type: object
            required:
              - service
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: mechanic

