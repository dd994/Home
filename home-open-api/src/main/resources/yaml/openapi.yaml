openapi: 3.0.0
info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  version: 1.0.0
servers:
  - url: /api/0
tags:
  - name: news
    description: News management operations
  - name: user
    description: user management
paths:
  /news:
    post:
      tags:
        - news
      summary: Add a news to the home page
      description: Add a news to the home page
      operationId: addNews
      requestBody:
        description: Create a news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNews'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all news to the home page
      description: This endpoint delivers all news to the Home Page
      operationId: getAllNews
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: text
          schema:
            type: string
        - in: query
          name: source
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its id
      description: View an existing news by its Identifier
      operationId: getNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing news
      description: Update an existing news by Identifier
      operationId: updateNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNews'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      operationId: deleteNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ReadUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: "Get all users"
      description: ''
      operationId: queryUsers
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: firstName
          schema:
            type: string
        - in: query
          name: lastName
          schema:
            type: string
        - in: query
          name: contact
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Paging-count:
              schema:
                type: integer
              description: Element count of current page.
            Paging-total-pages:
              schema:
                type: integer
              description: Total amout of pages.
            Paging-total-count:
              schema:
                type: integer
              description: Total amout of elements.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      tags:
        - user
      summary: "Get user by id"
      description: ''
      operationId: getUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current user
      description: Update current user
      operationId: updateUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      operationId: removeUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: Validation Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Conflict with current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    BaseView:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 50
        photoUrl:
          type: string
          format: url
        description:
          type: string
        source:
          type: string
        text:
          type: string
    CreateNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photoUrl:
          type: string
        description:
          type: string
          minLength: 1
          maxLength: 150
        source:
          type: string
        text:
          type: string
          minLength: 1
    UpdateNews:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
        photoUrl:
          type: string
        description:
          type: string
          minLength: 1
          maxLength: 50
        source:
          type: string
        text:
          type: string
          minLength: 1
          maxLength: 150
    ApiError:
      type: object
      properties:
        responseCode:
          type: integer
        errorMessage:
          type: string
    CreateUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 3
          maxLength: 254
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contact:
          type: string
          example: "+380506617305"
    UpdateUser:
      allOf:
        - $ref: '#/components/schemas/BaseView'
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        contact:
          type: string
          example: "+380506617305"
          minLength: 10
          maxLength: 13
        contacts:
          type: string
          example: "+380506617305"
